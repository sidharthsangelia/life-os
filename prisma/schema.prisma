// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String?
  email     String?   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

    // Relations
  notes       Note[]
  tasks       Task[]
  habits      Habit[]
  reflections Reflection[]
  completions HabitCompletion[]

  @@map("users")
}


model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    String?    @default("medium") // "high", "medium", "low"
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Habit {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#6366f1") // For UI customization
  frequency   String   @default("daily")   // "daily", "weekly"
  isActive    Boolean  @default(true)      // Soft delete for paused habits
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions HabitCompletion[]

  @@map("habits")
}

model HabitCompletion {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  notes     String?  // Optional notes for this completion
  createdAt DateTime @default(now())
  
  // Relations
  habitId String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure one completion per habit per day
  @@unique([habitId, date])
  @@map("habit_completions")
}

model Reflection {
  id        String   @id @default(cuid())
  title     String?  // Optional title
  content   String
  mood      String?  // "great", "good", "okay", "bad", "terrible"
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reflections")
}